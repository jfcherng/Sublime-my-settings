%YAML 1.2
---
name: PHP Source
hidden: true
version: 2
scope: source.php
variables:
  identifier_start: '[[:alpha:]_]'
  identifier: '\b{{identifier_start}}[[:alnum:]_]*\b'
  path: '\\?({{identifier}}\\)*{{identifier}}'
  regex_modifier: '[eimsuxADJSUX]*'
  sql_indicator: \s*(?:SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER)\b
  visibility_modifier: '\b(?:var|public|private|protected)\b'

  # jfcherng
  identifier_annotation: '\b(?:[[:alpha:][:alnum:]_\-]+|{{path}})\b'

contexts:
  main:
    - include: statements

  statements:
    - include: class
    - include: enum
    - include: use-statement
    - match: '(?i)^\s*(interface)\s+({{identifier}})\s*'
      captures:
        1: storage.type.interface.php
        2: entity.name.interface.php
      push:
        - meta_scope: meta.interface.php
        - match: \b(extends)\b\s*
          scope: storage.modifier.extends.php
          set:
            - match: '(?={{path}})'
              set:
                - meta_scope: meta.path.php
                - meta_content_scope: entity.other.inherited-class.php
                - include: identifier-parts
                - match: '(\\)?({{identifier}})(?!\\)'
                  captures:
                    1: punctuation.separator.namespace.php
                - match: ''
                  pop: 1
            - match: '(?=\S)'
              pop: 1
        - match: '(?=\S)'
          pop: 1
    - match: '(?i)^\s*(namespace)\b\s*'
      captures:
        1: keyword.other.namespace.php
      push:
        - meta_scope: meta.namespace.php meta.path.php
        - meta_content_scope: entity.name.namespace.php
        - include: identifier-parts
        - match: '(\\)?({{identifier}})(?!\\)'
          captures:
            1: punctuation.separator.namespace.php
        - match: ''
          pop: 1
    - match: '(?i)^\s*(trait)\s+({{identifier}})\s*'
      captures:
        1: storage.type.trait.php
        2: entity.name.trait.php
    - include: typed-property
    - include: function
    - match: '^\s*((?!default|else){{identifier}})\s*(:)(?!:)'
      captures:
        1: entity.name.label.php
        2: punctuation.separator.php
    - match: \{
      scope: punctuation.section.block.begin.php
    - match: \}
      scope: punctuation.section.block.end.php
    - include: expressions

  block:
    - match: \}
      scope: punctuation.section.block.end.php
      pop: 1
    - match: \{
      scope: punctuation.section.block.begin.php
      push: block
    - include: embedded-html
    - include: statements

  embedded-html:
    - match: (\?>)(\s*\n)?
      scope: meta.embedded.block.php
      captures:
        1: punctuation.section.embedded.end.php
        2: meta.html-newline-after-php.php
      push:
        - meta_scope: embedding.php text.html.basic
        - clear_scopes: true
        - match: <\?(?i:php)?
          scope: meta.embedded.block.php punctuation.section.embedded.begin.php
          pop: 1
        - match: ''
          with_prototype:
            - include: single-line-php-tag
            - match: (?=<\?(?i:php)?)
              pop: 1
          push: scope:text.html.basic

  single-line-php-tag:
    - match: (?:<\?=|<\?(?i:php)?(?=.*\?>))
      scope: punctuation.section.embedded.begin.php
      push:
        - meta_scope: meta.embedded.line.nested.php
        - meta_content_scope: source.php
        - match: (\?>)(\s*\n)?
          captures:
            1: punctuation.section.embedded.end.php
            2: meta.html-newline-after-php.php
          pop: 1
        - include: statements

  expressions:
    - include: attributes
    - include: comments
    - match: (?i)\b((?:require|include)(?:_once)?)\b\s*
      captures:
        1: keyword.control.import.include.php
      push:
        - meta_scope: meta.include.php
        # "\s*\?>" is for fixing one-liner ( https://github.com/sublimehq/Packages/issues/1545 )
        - match: (?=;|\)|\]|\s*\?>)
          pop: 1
        - include: expressions
    # yield from ( http://php.net/manual/en/language.generators.syntax.php#control-structures.yield.from )
    - match: \byield\b
      scope: keyword.control.php
      push:
        - match: \bfrom\b
          scope: keyword.control.php
          pop: 1
        - match: (?=\S)
          pop: 1
    - match: |-
        \b(?xi:
          break | case | continue | declare | default | die | do | else |
          elseif | enddeclare | endfor | endforeach | endif | endswitch | endwhile | exit |
          for | foreach | if | match | return | switch | use | while
        )\b
      scope: keyword.control.php
    - match: \b(catch)\b\s*(\()
      captures:
        1: keyword.control.exception.catch.php
        2: punctuation.section.group.begin.php
      push:
        - meta_scope: meta.catch.php
        - include: attributes
        - include: comments
        - include: identifier-parts-as-path
        - match: \)
          scope: punctuation.section.group.end.php
          pop: 1
        - match: \|
          scope: punctuation.separator.catch.php
        - match: \\
          scope: meta.path.php punctuation.separator.namespace.php
        - match: '{{identifier}}'
          scope: meta.path.php support.class.exception.php
        - match: '((\$){{identifier}})'
          captures:
            1: variable.other.php
            2: punctuation.definition.variable.php
    - match: \b(catch|try|throw|finally)\b
      scope: keyword.control.exception.php
    - include: arrow-function
    - include: closure
    - include: invoke-call
    - match: |-
        (?x)\s*(?=
            [[:alnum:]_$\\]+(::)
            (?:
                ({{identifier}})\s*\(
                |
                ((\$+){{identifier}})
                |
                ({{identifier}})
            )?
        )
      push:
        - match: (?=::{{identifier}}\s*\()
          set:
            - include: function-call-static
            - match: ''
              pop: 1
        - match: |-
            (?x)(::)
            (?:
                (class)\b
                |
                ((\$+){{identifier}})
                |
                ({{identifier}})
            )?
          captures:
            1: punctuation.accessor.double-colon.php
            2: constant.class.php
            3: variable.other.class.php
            4: punctuation.definition.variable.php
            5: constant.other.class.php
          set: after-identifier
        - match: (self|static|parent)\b
          scope: variable.language.php
        - include: class-name
        - include: variables
    - include: variables
    - include: strings
    - match: (array)(\()(\))
      scope: meta.array.empty.php
      captures:
        1: support.function.construct.php
        2: punctuation.section.array.begin.php
        3: punctuation.section.array.end.php
    - match: (array)(\()
      captures:
        1: support.function.construct.php
        2: punctuation.section.array.begin.php
      push:
        - meta_scope: meta.array.php
        - match: \)
          scope: punctuation.section.array.end.php
          pop: 1
        - include: expressions
    - match: (?i)\s*\(\s*(array|real|double|float|int(eger)?|bool(ean)?|string|object|binary|unset)\s*\)
      captures:
        1: storage.type.php
    - match: |-
        \b(?xi:
          array | bool | boolean | class | clone | double | float | function |
          int | integer | interface | object | real | string
        )\b
      scope: storage.type.php
    - match: (?i)\b(parent|self)\b
      scope: variable.language.php
    - match: |-
        \b(?xi:
          abstract | const | extends | final | global | implements | private | protected |
          public | static
        )\b
      scope: storage.modifier.php
    - include: object
    - match: ;
      scope: punctuation.terminator.expression.php
    - include: heredoc
    - include: numbers
    - match: (\+|-|\*|/|%|&|\||\^|>>|<<|\.|\?\?)=
      scope: keyword.operator.assignment.augmented.php
    - match: "=>"
      scope: keyword.operator.key.php
    - match: '(?:(\=)(&))|(&(?=[[:alpha:]$_]))'
      captures:
        1: keyword.operator.assignment.php
        2: storage.modifier.reference.php
        3: storage.modifier.reference.php
    - match: (@)
      scope: keyword.operator.error-control.php
    - match: (\-\-|\+\+)
      scope: keyword.operator.increment-decrement.php
    - match: (\-|\+|\*|/|%)
      scope: keyword.operator.arithmetic.php
    - match: '&&|\|\|'
      scope: keyword.operator.logical.php
    - match: '<<|>>|~|\^|&|\|'
      scope: keyword.operator.bitwise.php
    - match: (===|!==|<=>|==|!=|<=|>=|<>|<|>)
      scope: keyword.operator.comparison.php
    - match: (?i)(!)|\b(and|or|xor|as)\b
      scope: keyword.operator.logical.php
    - include: function-call
    - match: \?\?
      scope: keyword.operator.null-coalescing.php
    - match: \.\.\.
      scope: keyword.operator.spread.php
    - match: \.
      scope: keyword.operator.string.php
    - match: \?
      scope: keyword.operator.ternary.php
      push:
        - include: expressions
        - match: ':'
          scope: keyword.operator.ternary.php
          pop: 1
    - match: "="
      scope: keyword.operator.assignment.php
    - match: '(?i)\b(instanceof)\s+(?=[[:alpha:]\\$_])'
      captures:
        1: keyword.operator.type.php
      push:
        - match: '(?=[^[:alnum:]_\\$])'
          pop: 1
        - include: class-name
        - include: variables
    - include: instantiation
    - match: '(?i)(goto)\s+({{identifier}})'
      captures:
        1: keyword.control.goto.php
        2: support.other.php
    - include: string-backtick
    - match: '(\[)\s*(\])'
      scope: meta.array.empty.php
      captures:
        1: punctuation.section.array.begin.php
        2: punctuation.section.array.end.php
    - match: '\['
      scope: punctuation.section.array.begin.php
      push:
        - meta_scope: meta.array.php
        - match: '\]'
          scope: punctuation.section.array.end.php
          pop: 1
        - include: expressions
    - include: constants
    - match: \(
      scope: punctuation.section.group.begin.php
      push:
        - meta_scope: meta.group.php
        - match: \)
          scope: punctuation.section.group.end.php
          pop: 1
        - include: expressions

  after-identifier:
    - include: item-access
    - match: '(?=\S)'
      pop: 1

  after-function-call:
    - include: item-access
    - match: '(?=\S)'
      pop: 1

  item-access:
    - match: '\['
      scope: meta.item-access.php punctuation.section.brackets.begin.php
      push:
        - meta_content_scope: meta.item-access.arguments.php
        - match: '\]'
          scope: meta.item-access.php punctuation.section.brackets.end.php
          pop: 1
        - include: expressions

  type-hint:
    # https://wiki.php.net/rfc/union_types_v2
    - match: '(?=(?:\?\s*)?{{path}})'
      push:
        - match: \?
          scope: storage.type.nullable.php
        - match: \|
          scope: punctuation.separator.type.php
        # note that
        #   - "callable" and "void" are not allowed in property type
        #   - "false" and "null" are only working in unioned type
        # but we allow them as general types for simplifying syntax definition
        - match: |-
            \b(?xi:
              array | bool | callable | double | float | int | iterable |
              object | string | false | null | void | parent | self | static | mixed
            )\b
          scope: storage.type.php
        - include: class-builtin
        - include: identifier-parts-as-path
        - match: '(\\)?({{identifier}})(?!\\)'
          scope: meta.path.php
          captures:
            1: punctuation.separator.namespace.php
            2: support.class.php
        - match: ''
          pop: 1

  attributes:
    # https://wiki.php.net/rfc/attributes_v2
    # https://wiki.php.net/rfc/attribute_amendments
    # https://wiki.php.net/rfc/shorter_attribute_syntax
    # https://wiki.php.net/rfc/shorter_attribute_syntax_change
    - match: '#\['
      scope: punctuation.definition.attribute.begin.php
      push:
        - meta_scope: meta.attribute.php
        - include: class-name
        - match: \(
          scope: punctuation.section.group.begin.php
          push:
            - meta_scope: meta.attribute.php meta.function-call.php meta.group.php
            - match: \)
              scope: meta.function-call.php meta.group.php punctuation.section.group.end.php
              pop: 1
            - match: ','
              scope: punctuation.separator.php
            - include: function-call-named-parameters
            - include: expressions
        - match: \]
          scope: punctuation.definition.attribute.end.php
          pop: 1
        - match: ','
          scope: punctuation.separator.php

  class-builtin:
    - include: scope:source.php.builtin#class
    - include: ext-classes

  use-statement:
    - match: (?i)\b(use)\b\s*
      captures:
        1: keyword.other.use.php
      push:
        - meta_scope: meta.use.php
        - match: \bfunction\b
          scope: storage.type.php
          set: use-statement-function
        - match: \bconst\b
          scope: storage.type.php
          set: use-statement-const
        - match: '(?=\S)'
          set: use-statement-ns-class
        # Escape during typing
        - match: '(?=$\n)'
          pop: 1

  use-statement-common:
    - include: attributes
    - include: comments
    - match: (?i)\bas\b
      scope: keyword.other.use-as.php
    - match: ','
      scope: punctuation.separator.php

  use-statement-identifier-class-def:
    - match: '(?={{path}})'
      push:
        - include: attributes
        - include: comments
        # We are going to assume the alias is for a class so that the identifier
        # gets put into the index. This will be incorrect sometimes (because it
        # will sometimes be a namespace identifier), but the distinction
        # shouldn't be a huge deal.
        - match: '(?i)\b(as)\b'
          scope: keyword.other.use-as.php
          push:
            - include: attributes
            - include: comments
            - match: '{{identifier}}'
              scope: entity.name.class.php
              pop: 1
            - match: '(?=\S|$\n)'
              pop: 1
        - include: identifier-parts-as-path
        # We don't mark this as entity.name.class since the name is pulled
        # verbatim and the indexer should find the name in the original source
        # file.
        - match: '(\\)?({{identifier}})(?!\\)'
          scope: meta.path.php
          captures:
            1: punctuation.separator.namespace.php
            2: support.class.php
        - match: '(?=\S|$\n)'
          pop: 1

  use-statement-ns-class:
    - meta_content_scope: meta.use.php
    - match: (?=;|$\n)
      pop: 1
    - match: \{
      scope: punctuation.section.block.begin.php
      push:
        - match: \}
          scope: punctuation.section.block.end.php
          pop: 1
        - include: use-statement-common
        - include: use-statement-identifier-class-def
    - include: use-statement-common
    - include: use-statement-identifier-class-def

  use-statement-identifier-function-def:
    - match: '(?={{path}})'
      push:
        - include: attributes
        - include: comments
        - match: '(?i)\b(as)\b'
          scope: keyword.other.use-as.php
          push:
            - include: attributes
            - include: comments
            - match: '{{identifier}}'
              scope: entity.name.function.php
              pop: 1
            - match: '(?=\S|$\n)'
              pop: 1
        - include: identifier-parts-as-path
        # We don't mark this as entity.name.function since the name is pulled
        # verbatim and the indexer should find the name in the original source
        # file.
        - match: '(\\)?({{identifier}})(?!\\)'
          scope: meta.path.php
          captures:
            1: punctuation.separator.namespace.php
            2: support.function.php
        - match: '(?=\S|$\n)'
          pop: 1

  use-statement-function:
    - meta_content_scope: meta.use.php
    - match: (?=;|$\n)
      pop: 1
    - match: \{
      scope: punctuation.section.block.begin.php
      push:
        - match: \}
          scope: punctuation.section.block.end.php
          pop: 1
        - include: use-statement-common
        - include: use-statement-identifier-function-def
    - include: use-statement-common
    - include: use-statement-identifier-function-def

  use-statement-const:
    - meta_content_scope: meta.use.php
    - match: (?=;|$\n)
      pop: 1
    - match: \{
      scope: punctuation.section.block.begin.php
      push:
        - match: \}
          scope: punctuation.section.block.end.php
          pop: 1
        - include: use-statement-common
        - include: identifier-constant-pop
    - include: use-statement-common
    - include: identifier-constant-pop

  enum:
    - match: '(?i)\b(enum)\s+({{identifier}})\s*'
      captures:
        1: storage.type.enum.php
        2: entity.name.enum.php
      push: enum-definition

  enum-definition:
    - match: "(?=;)"
      pop: 1
    - match: "(?=:)"
      push:
        - match: ':'
          scope: punctuation.separator.php
          set:
            - match: '(?={{path}})'
              set:
                - meta_scope: meta.path.php
                - include: type-hint
                - match: ''
                  pop: 1
        - match: '(?=\S)'
          pop: 1
    - match: \{
      scope: meta.block.php punctuation.section.block.begin.php
      set: class-body
    - include: attributes
    - include: comments
    - match: (?i)(implements)\b\s*
      captures:
        1: storage.modifier.implements.php
      push:
        - include: attributes
        - include: comments
        - match: '(?={{path}})'
          push:
            - meta_scope: meta.path.php
            - meta_content_scope: entity.other.inherited-class.php
            - include: class-builtin
            - include: identifier-parts
            - match: '(\\)?{{identifier}}(?!\\)'
              captures:
                1: punctuation.separator.namespace.php
            - match: ''
              pop: 1
        - match: ','
          scope: punctuation.separator.php
        - match: '(?=\S)'
          pop: 1

  class:
    - match: '(?i)(\b(?:abstract|final)\s+)?\b(class)\s+({{identifier}})\s*'
      captures:
        1: storage.modifier.abstract.php
        2: storage.type.class.php
        3: entity.name.class.php
      push: class-definition

  class-definition:
    - match: "(?=;)"
      pop: 1
    - match: \{
      scope: meta.block.php punctuation.section.block.begin.php
      set: class-body
    - include: attributes
    - include: comments
    - match: (?i)(extends)\b\s*
      captures:
        1: storage.modifier.extends.php
      push:
        - match: '(?=implements)'
          pop: 1
        - include: attributes
        - include: comments
        - match: '(?={{path}})'
          set:
            - meta_scope: meta.path.php
            - meta_content_scope: entity.other.inherited-class.php
            - include: class-builtin
            - include: identifier-parts
            - match: '(\\)?{{identifier}}(?!\\)'
              captures:
                1: punctuation.separator.namespace.php
            - match: ''
              pop: 1
        - match: '(?=\S)'
          pop: 1
    - match: (?i)(implements)\b\s*
      captures:
        1: storage.modifier.implements.php
      push:
        - include: attributes
        - include: comments
        - match: '(?={{path}})'
          push:
            - meta_scope: meta.path.php
            - meta_content_scope: entity.other.inherited-class.php
            - include: class-builtin
            - include: identifier-parts
            - match: '(\\)?{{identifier}}(?!\\)'
              captures:
                1: punctuation.separator.namespace.php
            - match: ''
              pop: 1
        - match: ','
          scope: punctuation.separator.php
        - match: '(?=\S)'
          pop: 1

  class-body:
    - meta_scope: meta.class.php meta.block.php
    - include: attributes
    - include: comments
    - match: \}
      scope: punctuation.section.block.end.php
      pop: 1
    - match: (?i)\b(use)\b\s*
      captures:
        1: keyword.other.use.php
      push:
        - meta_scope: meta.use.php
        - match: (?=;|(?:^\s*$))
          pop: 1
        - match: \{
          scope: punctuation.section.block.begin.php
          set:
            - meta_scope: meta.use.php meta.block.php
            - match: \}
              scope: punctuation.section.block.end.php
              pop: 1
            - include: attributes
            - include: comments
            - match: \b(as)\b
              scope: keyword.other.use-as.php
            - match: \b(insteadof)\b
              scope: keyword.other.insteadof.php
            - include: class-builtin
            - match: '::'
              scope: punctuation.accessor.double-colon.php
            - match: (?={{path}})
              push:
                - meta_scope: meta.path.php
                - include: identifier-parts
                - match: '(\\)?{{identifier}}(?!\\)'
                  captures:
                    1: punctuation.separator.namespace.php
                - match: ''
                  pop: 1
        - include: attributes
        - include: comments
        - include: class-builtin
        - match: (?={{path}})
          push:
            - meta_scope: meta.path.php entity.other.inherited-class.php
            - include: identifier-parts
            - match: '(\\)?({{identifier}})(?!\\)'
              captures:
                1: punctuation.separator.namespace.php
            - match: ''
              pop: 1
        - match: ','
          scope: punctuation.separator.php
    - include: statements

  typed-property:
    # https://wiki.php.net/rfc/typed_properties_v2
    - match: (?=\b(?:{{visibility_modifier}}|static)\b)
      push:
        - match: (?=\b(?:const|function)\b)
          pop: 1
        - match: \b(?:{{visibility_modifier}}|static)\b
          scope: storage.modifier.php
        - include: type-hint
        # Exit on unexpected content
        - match: (?=\S)
          pop: 1

  function:
    - match: (?i)(?=(?:\b(?:final|abstract|{{visibility_modifier}}|static)\s+)*\bfunction\b\s*(&\s*)?{{identifier_start}})
      push:
        - meta_content_scope: meta.function.php
        - include: attributes
        - include: comments
        - match: '(?i)\b(final|abstract|{{visibility_modifier}}|static)\b'
          scope: storage.modifier.php
        - match: (?i)\bfunction\b
          scope: storage.type.function.php
        - match: '&'
          scope: storage.modifier.reference.php
        # https://wiki.php.net/rfc/constructor_promotion
        - match: __construct\b
          scope: entity.name.function.php support.function.magic.php
          push:
            - match: (?=\()
              set:
                - match: \(
                  scope: punctuation.section.group.begin.php
                  set:
                    - meta_scope: meta.function.parameters.php meta.group.php
                    - match: '{{visibility_modifier}}'
                      scope: storage.modifier.php
                    - include: function-parameters
            # Exit on unexpected content
            - match: (?=\S)
              pop: 1
        - match: '(__(?:callStatic|call|construct|destruct|get|set|isset|unset|toString|clone|set_state|sleep|wakeup|autoload|invoke|debugInfo))\b'
          scope: entity.name.function.php support.function.magic.php
        - match: '{{identifier}}'
          scope: entity.name.function.php
        # Lookahead is used here to prevent doubling up of meta.function and meta.function.parameters
        - match: (?=\()
          set:
            - match: \(
              scope: meta.function.parameters.php meta.group.php punctuation.section.group.begin.php
              set: function-parameters
        # Exit on unexpected content
        - match: (?=\S)
          pop: 1

  # https://wiki.php.net/rfc/arrow_functions_v2
  arrow-function:
    # "fn" can be a function name before PHP 7.4
    # Since PHP 7.4, "fn" is a reserved word
    - match: (?i)(?=\bfn\b\s*&?\s*\()
      branch_point: arrow-function-branch
      branch:
        # Anonymous function definition: fn($a) => $a * 2;
        - is-arrow-function
        # Function call, where "fn" is the function name: fn($a);
        - fn-function-call

  is-arrow-function:
    - match: (?i)\b(fn)\b\s*(&)?\s*(?=\()
      scope: meta.function.arrow-function.php
      captures:
        1: storage.type.function.php
        2: storage.modifier.reference.php
      push:
        - match: \(
          scope: meta.function.parameters.php meta.group.php punctuation.section.group.begin.php
          push: function-parameters
        - match: '=>'
          scope: punctuation.definition.arrow-function.php
          set:
            - match: '(?=;|,|\)|\s*\?>)'
              pop: 2
            - include: expressions
        - include: attributes
        - include: comments
        - match: (?=\S)
          fail: arrow-function-branch

  fn-function-call:
    - include: function-call
    - match: ''
      pop: 1

  closure:
    - match: (?i)\b(function)\s*(&)?\s*(?=\()
      scope: meta.function.closure.php
      captures:
        1: storage.type.function.php
        2: storage.modifier.reference.php
      push:
        - match: \(
          scope: meta.function.parameters.php meta.group.php punctuation.section.group.begin.php
          set: function-parameters

  function-parameters:
    - meta_scope: meta.function.parameters.php meta.group.php
    - match: \)
      scope: punctuation.section.group.end.php
      set:
        - meta_scope: meta.function.php
        - match: '\b(use)\b\s*(\()'
          scope: meta.function.closure.use.php
          captures:
            1: keyword.other.function.use.php
            2: punctuation.section.group.begin.php
          set: function-use
        - match: (?=:)
          set: function-return-type
        - match: \{
          scope: meta.block.php punctuation.section.block.begin.php
          set: function-body
        # Exit on unexpected content
        - match: (?=\S)
          pop: 1
    - include: attributes
    - include: comments
    - match: \b(array|callable|int|string|bool|float|object)\b
      scope: storage.type.php
    # Class name type hint
    - include: type-hint
    - match: '\.\.\.'
      scope: keyword.operator.spread.php
    - match: '&'
      scope: storage.modifier.reference.php
    - match: (\$+){{identifier}}
      scope: variable.parameter.php
      captures:
        1: punctuation.definition.variable.php
    - match: ','
      scope: punctuation.separator.php
    - match: '='
      scope: keyword.operator.assignment.php
      push:
        - match: (?=,|\))
          pop: 1
        - include: expressions

  function-use:
    - meta_scope: meta.function.closure.use.php
    - include: attributes
    - include: comments
    - match: \)
      scope: punctuation.section.group.end.php
      set:
        - meta_scope: meta.function.php
        - match: '(?=:)'
          set: function-return-type
        - match: \{
          scope: meta.block.php punctuation.section.block.begin.php
          set: function-body
        # Exit on unexpected content
        - match: (?=\S)
          pop: 1
    - match: '&'
      scope: storage.modifier.reference.php
    - match: '(\$+){{identifier}}'
      scope: variable.parameter.php
      captures:
        1: punctuation.definition.variable.php
    - match: ','
      scope: punctuation.separator.php

  function-return-type:
    - meta_scope: meta.function.return-type.php
    - match: '(?=;)'
      pop: 1
    - match: \{
      scope: meta.block.php punctuation.section.block.begin.php
      set: function-body
    - match: ':'
      scope: punctuation.separator.php
    - include: type-hint
    # Exit on unexpected content
    - match: (?=\S)
      pop: 1

  function-body:
    - meta_scope: meta.function.php meta.block.php
    - match: \}
      scope: punctuation.section.block.end.php
      pop: 1
    - include: embedded-html
    - match: \{
      scope: punctuation.section.block.begin.php
      push: block
    - include: statements

  class-name:
    - match: '(?={{path}})'
      push:
        - meta_scope: meta.path.php
        - include: class-builtin
        - include: identifier-parts
        - match: '(\\)?({{identifier}})(?!\\)'
          captures:
            1: punctuation.separator.namespace.php
            2: support.class.php
          pop: 1
        - match: ''
          pop: 1
  comments:
    # This only highlights a docblock if the first line contains only /** or
    # /**#@+ (which is used for docblock templates). Otherwise block-level
    # comment would be highlighted as invalid for constructs such as /**** ****/
    - match: |-
        (?x)/\*\*(?:
          (?:\#@\+)?\s*$ (?# multi-line doc )
          |
          (?=\s+@.*\s\*/\s*$) (?# inline doc )
        )
      scope: punctuation.definition.comment.begin.php
      push:
        - meta_scope: comment.block.documentation.phpdoc.php
        - match: \*/
          scope: punctuation.definition.comment.end.php
          pop: 1
        - include: php-doc
    - match: /\*
      scope: punctuation.definition.comment.begin.php
      push:
        - meta_scope: comment.block.php
        - match: \*/
          scope: punctuation.definition.comment.end.php
          pop: 1
    - match: //
      scope: punctuation.definition.comment.php
      push:
        - meta_scope: comment.line.double-slash.php
        - match: '(?=\?>)'
          pop: 1
        # Consume the newline so that completions aren't shown at the end of the line
        - match: \n
          pop: 1
    - match: '#'
      scope: punctuation.definition.comment.php
      push:
        - meta_scope: comment.line.number-sign.php
        - match: '(?=\?>)'
          pop: 1
        # Consume the newline so that completions aren't shown at the end of the line
        - match: \n
          pop: 1
  constants:
    - match: |-
        \b(?xi:
          TRUE | FALSE | NULL |
          __CLASS__ | __DIR__ | __FILE__ | __FUNCTION__ | __LINE__ | __METHOD__ | __NAMESPACE__
        )\b
      scope: constant.language.php
    - match: (?=\\?{{identifier}}\\{{path}})
      push:
        - meta_scope: meta.path.php
        - include: identifier-parts
        - match: '(\\)?({{identifier}})(?!\\)'
          captures:
            1: punctuation.separator.namespace.php
            2: constant.other.php
          pop: 1
    - match: '(?=\\?[[:alpha:]_])'
      push:
        - match: '(?=[^\\_[:alnum:]])'
          pop: 1
        - include: scope:source.php.builtin#constant
        - include: ext-constants
        # In PHP, any identifier which is not a variable is taken to be a constant.
        # However, if there is no constant defined with the given name then a notice
        # is generated and the constant is assumed to have the value of its name.
        - match: '{{identifier}}'
          scope: constant.other.php
  function-call:
    # Functions in a user-defined namespace should only be highlighted as user,
    # any built-in function names should not be highlighted specially
    - match: '(?={{path}}\\{{identifier}}\s*\()'
      push:
        - meta_scope: meta.function-call.php meta.path.php
        - include: identifier-parts
        - match: '{{identifier}}(?=\s*\()'
          scope: variable.function.php
          set: function-call-parameters
    - match: (?i)\b(print|echo)\b
      scope: support.function.construct.php
    # Root namespace function calls may be a built-in or user
    - match: '(\\)?(?={{identifier}}\s*\()'
      captures:
        1: punctuation.separator.namespace.php
      push:
        - meta_scope: meta.function-call.php
        - match: (?=\s*\()
          set: function-call-parameters
        - match: (?i)\b(isset|unset|e(val|mpty)|list)\b
          scope: support.function.construct.php
        - include: support
        - match: '{{identifier}}'
          scope: variable.function.php
  function-call-static:
    - match: (::)(?={{identifier}}\s*\()
      captures:
        1: punctuation.accessor.double-colon.php
      push:
        - meta_scope: meta.function-call.static.php
        - match: (?=\s*\()
          set: function-call-parameters
        - match: '{{identifier}}'
          scope: variable.function.php
  function-call-parameters:
    - match: \(
      scope: punctuation.section.group.begin.php
      set:
        - meta_scope: meta.function-call.php meta.group.php
        - match: \)
          scope: punctuation.section.group.end.php
          set: after-function-call
        - match: ','
          scope: punctuation.separator.php
        - include: function-call-named-parameters
        - include: expressions
  function-call-named-parameters:
    # https://wiki.php.net/rfc/named_params
    - match: ({{identifier}})\s*(:)(?!:)
      captures:
        1: variable.parameter.named.php
        2: punctuation.definition.variable.php
      push:
        - include: expressions
        - match: ''
          pop: 1
  heredoc:
    - match: (?=<<<\s*'?({{identifier}})'?\s*$)
      push:
        - match: ^\s*(\1)\b(?:(;)(\s*$\n?))?
          captures:
            1: punctuation.section.embedded.end.php keyword.operator.heredoc.php
            2: punctuation.terminator.expression.php
            3: meta.heredoc-end.php
          pop: 1
        - include: heredoc-jfcherng
        - match: <<<\s*(HTML)\s*$\n?
          scope: punctuation.section.embedded.begin.php punctuation.definition.string.php
          captures:
            1: keyword.operator.heredoc.php
          embed: heredoc-html
          embed_scope: meta.embedded.html text.html
          escape: (?=^\s*HTML\b)
        - match: <<<\s*('HTML')\s*$\n?
          scope: meta.embedded.html punctuation.section.embedded.begin.php punctuation.definition.string.php
          captures:
            1: keyword.operator.nowdoc.php
          embed: scope:text.html.basic
          embed_scope: meta.embedded.html text.html
          escape: (?=^\s*HTML\b)
        - match: <<<\s*(XML)\s*$\n?
          scope: punctuation.section.embedded.begin.php punctuation.definition.string.php
          captures:
            1: keyword.operator.heredoc.php
          embed: heredoc-xml
          embed_scope: meta.embedded.xml text.xml
          escape: (?=^\s*XML\b)
        - match: <<<\s*('XML')\s*$\n?
          scope: meta.embedded.xml punctuation.section.embedded.begin.php punctuation.definition.string.php
          captures:
            1: keyword.operator.nowdoc.php
          embed: scope:text.xml
          embed_scope: meta.embedded.xml text.xml
          escape: (?=^\s*XML\b)
        - match: <<<\s*(SQL)\s*$\n?
          scope: punctuation.section.embedded.begin.php punctuation.definition.string.php
          captures:
            1: keyword.operator.heredoc.php
          embed: heredoc-sql
          embed_scope: meta.embedded.sql source.sql
          escape: (?=^\s*SQL\b)
        - match: <<<\s*('SQL')\s*$\n?
          scope: meta.embedded.sql punctuation.section.embedded.begin.php punctuation.definition.string.php
          captures:
            1: keyword.operator.nowdoc.php
          embed: scope:source.sql
          embed_scope: meta.embedded.sql source.sql
          escape: (?=^\s*SQL\b)
        - match: <<<\s*(JAVASCRIPT)\s*$\n?
          scope: punctuation.section.embedded.begin.php punctuation.definition.string.php
          captures:
            1: keyword.operator.heredoc.php
          embed: heredoc-javascript
          embed_scope: meta.embedded.js source.js
          escape: (?=^\s*JAVASCRIPT\b)
        - match: <<<\s*('JAVASCRIPT')\s*$\n?
          scope: meta.embedded.js punctuation.section.embedded.begin.php punctuation.definition.string.php
          captures:
            1: keyword.operator.nowdoc.php
          embed: scope:source.js
          embed_scope: meta.embedded.js source.js
          escape: (?=^\s*JAVASCRIPT\b)
        - match: (<<<)\s*(JSON)\s*$\n?
          scope: punctuation.section.embedded.begin.php punctuation.definition.string.php
          captures:
            1: keyword.operator.heredoc.php
          embed: heredoc-json
          embed_scope: meta.embedded.json source.json
          escape: (?=^\s*JSON\b)
        - match: (<<<)\s*('JSON')\s*$\n?
          scope: meta.embedded.json punctuation.section.embedded.begin.php punctuation.definition.string.php
          captures:
            1: keyword.operator.nowdoc.php
          embed: scope:source.json
          embed_scope: meta.embedded.json source.json
          escape: (?=^\s*JSON\b)
        - match: <<<\s*(CSS)\s*$\n?
          scope: punctuation.section.embedded.begin.php punctuation.definition.string.php
          captures:
            1: keyword.operator.heredoc.php
          embed: heredoc-css
          embed_scope: meta.embedded.css source.css
          escape: (?=^\s*CSS\b)
        - match: <<<\s*('CSS')\s*$\n?
          scope: meta.embedded.css punctuation.section.embedded.begin.php punctuation.definition.string.php
          captures:
            1: keyword.operator.nowdoc.php
          embed: scope:source.css
          embed_scope: meta.embedded.css source.css
          escape: (?=^\s*CSS\b)
        - match: '<<<\s*({{identifier}})'
          scope: punctuation.definition.string.php
          captures:
            1: keyword.operator.heredoc.php
          push:
            - meta_scope: string.unquoted.heredoc.php
            - match: (?=^\s*\1\b)
              pop: 1
            - include: interpolation
        - match: <<<\s*('({{identifier}})')
          scope: punctuation.definition.string.php
          captures:
            1: keyword.operator.nowdoc.php
          push:
            - meta_scope: string.unquoted.nowdoc.php
            - match: (?=^\s*\2\b)
              pop: 1
  heredoc-html:
    - meta_include_prototype: false
    - match: ''
      push: scope:text.html.basic
      with_prototype:
        - include: interpolation
  heredoc-xml:
    - meta_include_prototype: false
    - match: ''
      push: scope:text.xml
      with_prototype:
        - include: interpolation
  heredoc-sql:
    - meta_include_prototype: false
    - match: ''
      push: scope:source.sql
      with_prototype:
        - include: interpolation
  heredoc-javascript:
    - meta_include_prototype: false
    - match: ''
      push: scope:source.js
      with_prototype:
        - include: interpolation
  heredoc-json:
    - meta_include_prototype: false
    - match: ''
      push: scope:source.json
      with_prototype:
        - include: interpolation
  heredoc-css:
    - meta_include_prototype: false
    - match: ''
      push: scope:source.css
      with_prototype:
        - include: interpolation
  instantiation:
    # anonymous class ( http://php.net/manual/en/language.oop5.anonymous.php )
    - match: '(?i)(new)\s+(class)\b\s*'
      captures:
        1: keyword.other.new.php
        2: storage.type.class.php
      push:
        - match: (?=\()
          push: function-call-parameters
        - match: ''
          set: class-definition
    - match: (?i)(new)\s+
      captures:
        1: keyword.other.new.php
      push:
        - match: '(?=[^[:alnum:]$_\\])'
          pop: 1
        - match: '(parent|static|self)\b'
          scope: variable.language.php
        - include: class-name
        - include: variables
  interpolation:
    - match: '\\[0-7]{1,3}'
      scope: constant.character.escape.octal.php
    - match: '\\x[0-9A-Fa-f]{1,2}'
      scope: constant.character.escape.hex.php
    - match: '\\u\{[0-9A-Fa-f]+\}'
      scope: constant.character.escape.unicodepoint.php
    - match: '\\[nrt\\\$\"]'
      scope: constant.character.escape.php
    - match: '(\{)(?=\$.*?\})'
      captures:
        1: punctuation.definition.expression.php
      push:
        - match: '(\})'
          captures:
            1: punctuation.definition.expression.php
          pop: 1
        - include: expressions
    # Handles: "foo${bar}baz"
    - match: '(\$\{){{identifier}}(\})'
      scope: variable.other.php
      captures:
        1: punctuation.definition.variable.php
        2: punctuation.definition.variable.php
    - match: '(\$\{)(?=.*?\})'
      captures:
        1: punctuation.definition.variable.php
      push:
        - match: '(\})'
          captures:
            1: punctuation.definition.variable.php
          pop: 1
        - include: expressions
    # Handles: $foo, $foo[0], $foo[$bar], $foo->bar
    - match: |-
        (?x:
          (?=
            \${{identifier}}
            (?:
                \??->{{identifier}}
                |
                \[ ( \d+ | \$?{{identifier}} ) \]
            )
          )
        )
      push:
        - match: (\??)(->)({{identifier}})
          captures:
            1: punctuation.accessor.nullsafe.php
            2: punctuation.accessor.arrow.php
            3: variable.other.member.php
          pop: 1
        - match: '\['
          scope: punctuation.section.brackets.begin.php
          set:
            - meta_scope: meta.item-access.arguments.php
            - match: '\]'
              scope: punctuation.section.brackets.end.php
              pop: 1
            - include: numbers
            - include: variables
            - match: '{{identifier}}'
              scope: constant.other.php
        - include: variables-no-item-access
    - include: variables
  invoke-call:
    - match: '(\$+)({{identifier}})(?=\s*\()'
      scope: meta.function-call.invoke.php
      captures:
        1: punctuation.definition.variable.php
        2: variable.other.php
      push: function-call-parameters
  # Trailing underscores are allowed to prevent numbers from flickering while typing
  # The underscore is for PHP 7.4: https://wiki.php.net/rfc/numeric_literal_separator
  numbers:
    - match: '\b(0[bB])((?!_)(?:[01]|_(?!_))*)\b'
      scope: meta.number.integer.binary.php
      captures:
        1: constant.numeric.base.php
        2: constant.numeric.value.php
    - match: '\b(0[oO])((?!_)(?:\h|_(?!_))*)\b'
      scope: meta.number.integer.octal.php
      captures:
        1: constant.numeric.base.php
        2: constant.numeric.value.php
    - match: '\b(0[xX])((?!_)(?:\h|_(?!_))*)\b'
      scope: meta.number.integer.hexadecimal.php
      captures:
        1: constant.numeric.base.php
        2: constant.numeric.value.php
    - match: |-
        (?x:
          (?:
            (?# such as 123.4 or .123)
            (?:\b(?!_)(?:\d|_(?!_))+|\B)(\.)(?!_)(?:\d|_(?!_))+
            |
            (?# such as 123.)
            \b(?!_)(?:\d|_(?!_))+(\.)
          )(?:[eE][+-]?(?!_)(?:\d|_(?!_))+)?\b
          |
          (?# such as 123e-4)
          \b(?!_)(?:\d|_(?!_))+(?:[eE][+-]?(?!_)(?:\d|_(?!_))+)\b
        )
      scope: meta.number.float.decimal.php constant.numeric.value.php
      captures:
        1: punctuation.separator.decimal.php
        2: punctuation.separator.decimal.php
    - match: '\b(?!_)(?:\d|_(?!_))+\b'
      scope: meta.number.integer.decimal.php constant.numeric.value.php
  object:
    - match: (\??)(->)(\$?\{)
      captures:
        1: punctuation.accessor.nullsafe.php
        2: punctuation.accessor.arrow.php
        3: punctuation.definition.variable.php
      push:
        - match: '(\})'
          captures:
            1: punctuation.definition.variable.php
          set: after-identifier
        - include: expressions
    - match: (\??)(->)({{identifier}})(?=\s*\()
      scope: meta.function-call.method.php
      captures:
        1: punctuation.accessor.nullsafe.php
        2: punctuation.accessor.arrow.php
        3: variable.function.php
      push: function-call-parameters
    - include: function-call-static
    - match: (\??)(->)((\$+)?{{identifier}})?
      captures:
        1: punctuation.accessor.nullsafe.php
        2: punctuation.accessor.arrow.php
        3: variable.other.member.php
        4: punctuation.definition.variable.php
      push: after-identifier
    - match: '(::)({{identifier}})?'
      captures:
        1: punctuation.accessor.double-colon.php
        2: constant.other.class.php
      push: after-identifier
  parameter-default-types:
    - include: strings
    - include: numbers
    - include: string-backtick
    - include: variables
    - match: "=>"
      scope: keyword.operator.key.php
    - match: "="
      scope: keyword.operator.assignment.php
    - match: '&(?=\s*\$)'
      scope: storage.modifier.reference.php
    - match: (array)\s*(\()
      captures:
        1: support.function.construct.php
        2: punctuation.section.array.begin.php
      push:
        - meta_scope: meta.array.php
        - match: \)
          scope: punctuation.section.array.end.php
          pop: 1
        - include: parameter-default-types
    - include: instantiation
    - match: \s*(?={{path}}(::)({{identifier}})?)
      push:
        - match: '(::)({{identifier}})?'
          captures:
            1: punctuation.accessor.double-colon.php
            2: constant.other.class.php
          pop: 1
        - include: class-name
    - include: constants
  php-doc:
    # If the next line doesn't start with whitespace then an asterisk, the use
    # is either writing an invalid phpdoc comment, or not using phpdoc. Instead
    # of marking the comment as invalid, we just switch to a normal block-level
    # comment.
    - match: ^(?!\s*\*)
      set:
        - meta_scope: comment.block.php
        - match: \*/
          scope: punctuation.definition.comment.end.php
          pop: 1
    - match: ^\s*(\*)\s*(@access)\s+(({{visibility_modifier}})|(.+))\s*$
      captures:
        1: punctuation.definition.comment.php
        2: keyword.other.phpdoc.php
        4: storage.modifier.php
        5: invalid.illegal.wrong-access-type.phpdoc.php
    - include: doc-annotation-leading-asterisk
    - match: "((https?|s?ftp|ftps|file|smb|afp|nfs|(x-)?man|gopher|txmt)://|mailto:)[-:@a-zA-Z0-9_.~%+/?=&#]*[-@a-zA-Z0-9_~%+/=&#]"
      scope: markup.underline.link.php
    - match: (@xlink)\s+(.+)\s*$
      captures:
        1: keyword.other.phpdoc.php
        2: markup.underline.link.php
    - match: \@(a(bstract|pi|uthor)|c(ategory|opyright)|example|global|i(nternal|gnore)|li(cense|nk)|pa(ckage|ram)|return|s(ee|ince|tatic|ubpackage)|t(hrows|odo)|v(ar|ersion)|uses|deprecated|fi(nal|lesource)|property(-(read|write))?|method|source)\b
      scope: keyword.other.phpdoc.php
    - match: \{(@inheritdoc)\}
      captures:
        1: keyword.other.phpdoc.php
    # Annotations from PHPUnit
    - match: \@(author|after(?:Class)?|backup(?:Globals|StaticAttributes)|before(?:Class)?|codeCoverageIgnore*|covers(?:DefaultClass|Nothing)?|dataProvider|depends|doesNotPerformAssertions|expectedException(?:Code|Message(?:RegExp)?)?|group|large|medium|preserveGlobalState|requires|run(TestsInSeparateProcesses|InSeparateProcess)|small|test(dox|With)?|ticket|uses)\b
      scope: keyword.other.phpunit.php
    - match: '\{(@(link)).+?\}'
      scope: meta.tag.inline.phpdoc.php
      captures:
        1: keyword.other.phpdoc.php
    # General annotations
    - include: doc-annotation
  regex-double-quoted-branch:
    - match: (")(/)
      captures:
        1: punctuation.definition.string.begin.php
        2: punctuation.definition.string.regex-delimiter.begin.php
      push:
        - meta_scope: meta.string.php string.quoted.double.php
        - match: (/)({{regex_modifier}})(")
          captures:
            1: punctuation.definition.string.regex-delimiter.end.php
            2: meta.regex.modifier.php
            3: punctuation.definition.string.end.php
          pop: 2 # branch successful matched
        - match: (?=")
          pop: 1
        # workaround for greedy scope "$" as punctuation.definition.variable
        # dangling "$" in regex means EOL, but not variable definition...
        - match: \$+(?!{{identifier}})
          scope: keyword.control.anchor.regexp
        - match: ''
          push: scope:source.regexp.php
          with_prototype:
            - match: (?=(/)({{regex_modifier}})(")|")
              pop: 1
            - include: interpolation
            - match: \\"
              scope: constant.character.escape
            - match: \s(#)([^"]*)$
              captures:
                1: comment.regexp.php punctuation.definition.comment.regexp.php
                2: comment.regexp.php
    - match: ''
      fail: branch-point-double-quoted
  regex-single-quoted-branch:
    - match: (')(/)
      captures:
        1: punctuation.definition.string.begin.php
        2: punctuation.definition.string.regex-delimiter.begin.php
      push:
        - meta_scope: meta.string.php string.quoted.single.php
        - match: (/)({{regex_modifier}})(')
          captures:
            1: punctuation.definition.string.regex-delimiter.end.php
            2: meta.regex.modifier.php
            3: punctuation.definition.string.end.php
          pop: 2 # branch successful matched
        - match: (?=')
          pop: 1
        - match: ''
          push: scope:source.regexp.php
          with_prototype:
            - match: (?=(/)({{regex_modifier}})(')|')
              pop: 1
            - match: \\'
              scope: constant.character.escape
            - match: \s(#)([^']*)$
              captures:
                1: comment.regexp.php punctuation.definition.comment.regexp.php
                2: comment.regexp.php
    - match: ''
      fail: branch-point-single-quoted
  string-double-quoted-branch:
    - include: string-double-quoted
    - match: ''
      pop: 1
  string-single-quoted-branch:
    - include: string-single-quoted
    - match: ''
      pop: 1
  string-backtick:
    - match: "`"
      scope: punctuation.definition.string.begin.php
      push:
        - meta_scope: string.interpolated.php
        - match: "`"
          scope: punctuation.definition.string.end.php
          pop: 1
        - match: \\.
          scope: constant.character.escape.php
        - include: interpolation
  string-double-quoted:
    - match: '"'
      scope: punctuation.definition.string.begin.php
      push:
        - meta_scope: string.quoted.double.php
        - meta_content_scope: meta.string-contents.quoted.double.php
        - match: '(?={{sql_indicator}})'
          set:
            - meta_scope: string.quoted.double.php
            - meta_content_scope: meta.string-contents.quoted.double.php
            - match: '"'
              scope: punctuation.definition.string.end.php
              pop: 1
            - match: ''
              with_prototype:
                - match: '(?=")'
                  pop: 1
                - include: interpolation
              push: 'scope:source.sql'
        - match: '(?=\S)'
          set:
            - meta_scope: string.quoted.double.php
            - meta_content_scope: meta.string-contents.quoted.double.php
            - match: '"'
              scope: punctuation.definition.string.end.php
              pop: 1
            - include: interpolation
  string-single-quoted:
    - match: "'"
      scope: punctuation.definition.string.begin.php
      push:
        - meta_scope: string.quoted.single.php
        - meta_content_scope: meta.string-contents.quoted.single.php
        - match: '(?={{sql_indicator}})'
          set:
            - meta_scope: string.quoted.single.php
            - meta_content_scope: meta.string-contents.quoted.single.php
            - match: "'"
              scope: punctuation.definition.string.end.php
              pop: 1
            - match: ''
              with_prototype:
                - match: "(?=')"
                  pop: 1
                - match: '\\[\\'']'
                  scope: constant.character.escape.php
              push: 'scope:source.sql'
        - match: '(?=\S)'
          set:
            - meta_scope: string.quoted.single.php
            - meta_content_scope: meta.string-contents.quoted.single.php
            - match: "'"
              scope: punctuation.definition.string.end.php
              pop: 1
            - match: '\\[\\'']'
              scope: constant.character.escape.php

  strings:
    - match: (?=")
      branch_point: branch-point-double-quoted
      branch:
        - regex-double-quoted-branch
        - string-double-quoted-branch
    - match: (?=')
      branch_point: branch-point-single-quoted
      branch:
        - regex-single-quoted-branch
        - string-single-quoted-branch

  support:
    - include: scope:source.php.builtin#function
    - include: ext-functions

  variables:
    - match: (\$)((_(COOKIE|FILES|GET|POST|REQUEST))|arg(v|c))\b
      scope: variable.other.global.php
      captures:
        1: punctuation.definition.variable.php
      push: after-identifier
    - match: (\$)((GLOBALS|_(ENV|SERVER|SESSION)))
      scope: variable.other.global.safer.php
      captures:
        1: punctuation.definition.variable.php
      push: after-identifier
    - match: '(\$)this\b'
      scope: variable.language.php
      captures:
        1: punctuation.definition.variable.php
      push: after-identifier
    - match: (\$+){{identifier}}
      scope: variable.other.php
      captures:
        1: punctuation.definition.variable.php
      push: after-identifier
    # resolves https://github.com/sublimehq/Packages/issues/2585
    - match: \$+
      scope: punctuation.definition.variable.php

  variables-no-item-access:
    - match: (\$)((_(COOKIE|FILES|GET|POST|REQUEST))|arg(v|c))\b
      scope: variable.other.global.php
      captures:
        1: punctuation.definition.variable.php
    - match: (\$)((GLOBALS|_(ENV|SERVER|SESSION)))
      scope: variable.other.global.safer.php
      captures:
        1: punctuation.definition.variable.php
    - match: '(\$)this\b'
      scope: variable.language.php
      captures:
        1: punctuation.definition.variable.php
    - match: (\$+){{identifier}}
      scope: variable.other.php
      captures:
        1: punctuation.definition.variable.php

  identifier-parts:
    - match: (\\)?({{identifier}})(\\)
      captures:
        1: punctuation.separator.namespace.php
        2: support.other.namespace.php
        3: punctuation.separator.namespace.php

  identifier-parts-as-path:
    - match: (\\)?({{identifier}})(\\)
      scope: meta.path.php
      captures:
        1: punctuation.separator.namespace.php
        2: support.other.namespace.php
        3: punctuation.separator.namespace.php

  identifier-constant-pop:
    - match: '(?={{path}})'
      push:
        - meta_scope: meta.path.php
        - include: identifier-parts
        - match: '(\\)?({{identifier}})(?!\\)'
          captures:
            1: punctuation.separator.namespace.php
            2: constant.other.php
          set: after-identifier
        - match: ''
          pop: 1

  ext-classes:
    - include: scope:source.php.ext.apache#class
    - include: scope:source.php.ext.apc#class
    - include: scope:source.php.ext.array#class
    - include: scope:source.php.ext.bcmath#class
    - include: scope:source.php.ext.bz2#class
    - include: scope:source.php.ext.calendar#class
    - include: scope:source.php.ext.com#class
    - include: scope:source.php.ext.csprng#class
    - include: scope:source.php.ext.ctype#class
    - include: scope:source.php.ext.curl#class
    - include: scope:source.php.ext.dba#class
    - include: scope:source.php.ext.dbx#class
    - include: scope:source.php.ext.dir#class
    - include: scope:source.php.ext.domxml#class
    - include: scope:source.php.ext.dotnet#class
    - include: scope:source.php.ext.enchant#class
    - include: scope:source.php.ext.ereg#class
    - include: scope:source.php.ext.exif#class
    - include: scope:source.php.ext.fileinfo#class
    - include: scope:source.php.ext.filesystem#class
    - include: scope:source.php.ext.filter#class
    - include: scope:source.php.ext.ftp#class
    - include: scope:source.php.ext.gettext#class
    - include: scope:source.php.ext.gmp#class
    - include: scope:source.php.ext.hash#class
    - include: scope:source.php.ext.http#class
    - include: scope:source.php.ext.iconv#class
    - include: scope:source.php.ext.iisfunc#class
    - include: scope:source.php.ext.image#class
    - include: scope:source.php.ext.imap#class
    - include: scope:source.php.ext.interbase#class
    - include: scope:source.php.ext.intl#class
    - include: scope:source.php.ext.json#class
    - include: scope:source.php.ext.ldap#class
    - include: scope:source.php.ext.mail#class
    - include: scope:source.php.ext.math#class
    - include: scope:source.php.ext.mbstring#class
    - include: scope:source.php.ext.mcrypt#class
    - include: scope:source.php.ext.mhash#class
    - include: scope:source.php.ext.mongo#class
    - include: scope:source.php.ext.mssql#class
    - include: scope:source.php.ext.mysql#class
    - include: scope:source.php.ext.mysqli#class
    - include: scope:source.php.ext.mysqlnd#class
    - include: scope:source.php.ext.network#class
    - include: scope:source.php.ext.nsapi#class
    - include: scope:source.php.ext.oci8#class
    - include: scope:source.php.ext.odbc#class
    - include: scope:source.php.ext.openssl#class
    - include: scope:source.php.ext.pcntl#class
    - include: scope:source.php.ext.pcre#class
    - include: scope:source.php.ext.pgsql#class
    - include: scope:source.php.ext.posix#class
    - include: scope:source.php.ext.proctitle#class
    - include: scope:source.php.ext.pspell#class
    - include: scope:source.php.ext.readline#class
    - include: scope:source.php.ext.recode#class
    - include: scope:source.php.ext.rrd#class
    - include: scope:source.php.ext.sem#class
    - include: scope:source.php.ext.session#class
    - include: scope:source.php.ext.shmop#class
    - include: scope:source.php.ext.simplexml#class
    - include: scope:source.php.ext.snmp#class
    - include: scope:source.php.ext.soap#class
    - include: scope:source.php.ext.sockets#class
    - include: scope:source.php.ext.spl#class
    - include: scope:source.php.ext.sqlite#class
    - include: scope:source.php.ext.stats#class
    - include: scope:source.php.ext.stream#class
    - include: scope:source.php.ext.string#class
    - include: scope:source.php.ext.sybase#class
    - include: scope:source.php.ext.tidy#class
    - include: scope:source.php.ext.tokenizer#class
    - include: scope:source.php.ext.url#class
    - include: scope:source.php.ext.wddx#class
    - include: scope:source.php.ext.xhprof#class
    - include: scope:source.php.ext.xml#class
    - include: scope:source.php.ext.xmlrpc#class
    - include: scope:source.php.ext.xmlwriter#class
    - include: scope:source.php.ext.xslt#class
    - include: scope:source.php.ext.zip#class
    - include: scope:source.php.ext.zlib#class

  ext-constants:
    - include: scope:source.php.ext.apache#constant
    - include: scope:source.php.ext.apc#constant
    - include: scope:source.php.ext.array#constant
    - include: scope:source.php.ext.bcmath#constant
    - include: scope:source.php.ext.bz2#constant
    - include: scope:source.php.ext.calendar#constant
    - include: scope:source.php.ext.com#constant
    - include: scope:source.php.ext.csprng#constant
    - include: scope:source.php.ext.ctype#constant
    - include: scope:source.php.ext.curl#constant
    - include: scope:source.php.ext.dba#constant
    - include: scope:source.php.ext.dbx#constant
    - include: scope:source.php.ext.dir#constant
    - include: scope:source.php.ext.domxml#constant
    - include: scope:source.php.ext.dotnet#constant
    - include: scope:source.php.ext.enchant#constant
    - include: scope:source.php.ext.ereg#constant
    - include: scope:source.php.ext.exif#constant
    - include: scope:source.php.ext.fileinfo#constant
    - include: scope:source.php.ext.filesystem#constant
    - include: scope:source.php.ext.filter#constant
    - include: scope:source.php.ext.ftp#constant
    - include: scope:source.php.ext.gettext#constant
    - include: scope:source.php.ext.gmp#constant
    - include: scope:source.php.ext.hash#constant
    - include: scope:source.php.ext.http#constant
    - include: scope:source.php.ext.iconv#constant
    - include: scope:source.php.ext.iisfunc#constant
    - include: scope:source.php.ext.image#constant
    - include: scope:source.php.ext.imap#constant
    - include: scope:source.php.ext.interbase#constant
    - include: scope:source.php.ext.intl#constant
    - include: scope:source.php.ext.json#constant
    - include: scope:source.php.ext.ldap#constant
    - include: scope:source.php.ext.mail#constant
    - include: scope:source.php.ext.math#constant
    - include: scope:source.php.ext.mbstring#constant
    - include: scope:source.php.ext.mcrypt#constant
    - include: scope:source.php.ext.mhash#constant
    - include: scope:source.php.ext.mongo#constant
    - include: scope:source.php.ext.mssql#constant
    - include: scope:source.php.ext.mysql#constant
    - include: scope:source.php.ext.mysqli#constant
    - include: scope:source.php.ext.mysqlnd#constant
    - include: scope:source.php.ext.network#constant
    - include: scope:source.php.ext.nsapi#constant
    - include: scope:source.php.ext.oci8#constant
    - include: scope:source.php.ext.odbc#constant
    - include: scope:source.php.ext.openssl#constant
    - include: scope:source.php.ext.pcntl#constant
    - include: scope:source.php.ext.pcre#constant
    - include: scope:source.php.ext.pgsql#constant
    - include: scope:source.php.ext.posix#constant
    - include: scope:source.php.ext.proctitle#constant
    - include: scope:source.php.ext.pspell#constant
    - include: scope:source.php.ext.readline#constant
    - include: scope:source.php.ext.recode#constant
    - include: scope:source.php.ext.rrd#constant
    - include: scope:source.php.ext.sem#constant
    - include: scope:source.php.ext.session#constant
    - include: scope:source.php.ext.shmop#constant
    - include: scope:source.php.ext.simplexml#constant
    - include: scope:source.php.ext.snmp#constant
    - include: scope:source.php.ext.soap#constant
    - include: scope:source.php.ext.sockets#constant
    - include: scope:source.php.ext.spl#constant
    - include: scope:source.php.ext.sqlite#constant
    - include: scope:source.php.ext.stats#constant
    - include: scope:source.php.ext.stream#constant
    - include: scope:source.php.ext.string#constant
    - include: scope:source.php.ext.sybase#constant
    - include: scope:source.php.ext.tidy#constant
    - include: scope:source.php.ext.tokenizer#constant
    - include: scope:source.php.ext.url#constant
    - include: scope:source.php.ext.wddx#constant
    - include: scope:source.php.ext.xhprof#constant
    - include: scope:source.php.ext.xml#constant
    - include: scope:source.php.ext.xmlrpc#constant
    - include: scope:source.php.ext.xmlwriter#constant
    - include: scope:source.php.ext.xslt#constant
    - include: scope:source.php.ext.zip#constant
    - include: scope:source.php.ext.zlib#constant

  ext-functions:
    - include: scope:source.php.ext.apache#function
    - include: scope:source.php.ext.apc#function
    - include: scope:source.php.ext.array#function
    - include: scope:source.php.ext.bcmath#function
    - include: scope:source.php.ext.bz2#function
    - include: scope:source.php.ext.calendar#function
    - include: scope:source.php.ext.com#function
    - include: scope:source.php.ext.csprng#function
    - include: scope:source.php.ext.ctype#function
    - include: scope:source.php.ext.curl#function
    - include: scope:source.php.ext.dba#function
    - include: scope:source.php.ext.dbx#function
    - include: scope:source.php.ext.dir#function
    - include: scope:source.php.ext.domxml#function
    - include: scope:source.php.ext.dotnet#function
    - include: scope:source.php.ext.enchant#function
    - include: scope:source.php.ext.ereg#function
    - include: scope:source.php.ext.exif#function
    - include: scope:source.php.ext.fileinfo#function
    - include: scope:source.php.ext.filesystem#function
    - include: scope:source.php.ext.filter#function
    - include: scope:source.php.ext.ftp#function
    - include: scope:source.php.ext.gettext#function
    - include: scope:source.php.ext.gmp#function
    - include: scope:source.php.ext.hash#function
    - include: scope:source.php.ext.http#function
    - include: scope:source.php.ext.iconv#function
    - include: scope:source.php.ext.iisfunc#function
    - include: scope:source.php.ext.image#function
    - include: scope:source.php.ext.imap#function
    - include: scope:source.php.ext.interbase#function
    - include: scope:source.php.ext.intl#function
    - include: scope:source.php.ext.json#function
    - include: scope:source.php.ext.ldap#function
    - include: scope:source.php.ext.mail#function
    - include: scope:source.php.ext.math#function
    - include: scope:source.php.ext.mbstring#function
    - include: scope:source.php.ext.mcrypt#function
    - include: scope:source.php.ext.mhash#function
    - include: scope:source.php.ext.mongo#function
    - include: scope:source.php.ext.mssql#function
    - include: scope:source.php.ext.mysql#function
    - include: scope:source.php.ext.mysqli#function
    - include: scope:source.php.ext.mysqlnd#function
    - include: scope:source.php.ext.network#function
    - include: scope:source.php.ext.nsapi#function
    - include: scope:source.php.ext.oci8#function
    - include: scope:source.php.ext.odbc#function
    - include: scope:source.php.ext.openssl#function
    - include: scope:source.php.ext.pcntl#function
    - include: scope:source.php.ext.pcre#function
    - include: scope:source.php.ext.pgsql#function
    - include: scope:source.php.ext.posix#function
    - include: scope:source.php.ext.proctitle#function
    - include: scope:source.php.ext.pspell#function
    - include: scope:source.php.ext.readline#function
    - include: scope:source.php.ext.recode#function
    - include: scope:source.php.ext.rrd#function
    - include: scope:source.php.ext.sem#function
    - include: scope:source.php.ext.session#function
    - include: scope:source.php.ext.shmop#function
    - include: scope:source.php.ext.simplexml#function
    - include: scope:source.php.ext.snmp#function
    - include: scope:source.php.ext.soap#function
    - include: scope:source.php.ext.sockets#function
    - include: scope:source.php.ext.spl#function
    - include: scope:source.php.ext.sqlite#function
    - include: scope:source.php.ext.stats#function
    - include: scope:source.php.ext.stream#function
    - include: scope:source.php.ext.string#function
    - include: scope:source.php.ext.sybase#function
    - include: scope:source.php.ext.tidy#function
    - include: scope:source.php.ext.tokenizer#function
    - include: scope:source.php.ext.url#function
    - include: scope:source.php.ext.wddx#function
    - include: scope:source.php.ext.xhprof#function
    - include: scope:source.php.ext.xml#function
    - include: scope:source.php.ext.xmlrpc#function
    - include: scope:source.php.ext.xmlwriter#function
    - include: scope:source.php.ext.xslt#function
    - include: scope:source.php.ext.zip#function
    - include: scope:source.php.ext.zlib#function

  # jfcherng
  doc-annotation:
    - include: email
    # general annotations like @Route("/login", name="login", methods="GET")
    - match: \@{{identifier_annotation}}(?=\s*\()
      scope: keyword.other.annotation.object.php
      push:
        - meta_scope: meta.comment.annotation.php
        - include: doc-annotation-leading-asterisk
        - match: \)
          scope: punctuation.section.group.end.php
          pop: 1
        - match: \(
          scope: punctuation.section.group.begin.php
          push:
            - match: (?=\))
              pop: 1
            - match: '[,.:]'
              scope: punctuation.separator.php
            - match: '[(\[{]'
              scope: punctuation.section.group.begin.php
            - match: '[)\]}]'
              scope: punctuation.section.group.end.php
            - include: doc-annotation-args-named
            - include: doc-annotation-args-unnamed
    - match: \@{{identifier_annotation}}(?=$|[\s'"(\[{])
      scope: meta.comment.annotation.php keyword.other.annotation.tag.php
  doc-annotation-args-named:
    - include: doc-annotation-leading-asterisk
    - match: '({{identifier}})\s*(=)'
      captures:
        1: variable.parameter.php
        2: keyword.operator.assignment.php
      push:
        - include: doc-annotation
        - match: (?=[,)])
          pop: 1
        - match: '[.:]'
          scope: punctuation.separator.php
        - match: '[\[{]'
          scope: punctuation.section.group.begin.php
        - match: '[\]}]'
          scope: punctuation.section.group.end.php
        - include: doc-annotation-args-unnamed
  doc-annotation-args-unnamed:
    - include: doc-annotation
    - include: doc-annotation-leading-asterisk
    - include: constants
    - include: numbers
    - include: strings
  doc-annotation-leading-asterisk:
    - match: ^\s*(\*)(?!/)
      captures:
        1: punctuation.definition.comment.php
  email:
    - match: '[a-zA-Z0-9.!#$%&*+/=?^_|~-]+@[a-zA-Z0-9\-_]+(?:\.[a-zA-Z0-9\-_]+)*'
      scope: markup.underline.email.php
  heredoc-jfcherng:
    - match: <<<\s*(JS)\s*$\n?
      scope: punctuation.section.embedded.begin.php punctuation.definition.string.php
      captures:
        1: keyword.operator.heredoc.php
      embed: heredoc-javascript
      embed_scope: meta.embedded.js source.js
      escape: (?=^\s*JS\b)
    - match: <<<\s*('JS')\s*$\n?
      scope: meta.embedded.js punctuation.section.embedded.begin.php punctuation.definition.string.php
      captures:
        1: keyword.operator.nowdoc.php
      embed: scope:source.js
      embed_scope: meta.embedded.js source.js
      escape: (?=^\s*JS\b)
    - match: (<<<)\s*(PHP)\s*$\n?
      scope: punctuation.section.embedded.begin.php punctuation.definition.string.php
      captures:
        1: keyword.operator.heredoc.php
      embed: heredoc-php
      embed_scope: meta.embedded.php embedding.php
      escape: (?=^\s*PHP\b)
    - match: (<<<)\s*('PHP')\s*$\n?
      scope: meta.embedded.php punctuation.section.embedded.begin.php punctuation.definition.string.php
      captures:
        1: keyword.operator.nowdoc.php
      embed: scope:embedding.php
      embed_scope: meta.embedded.php embedding.php
      escape: (?=^\s*PHP\b)
    - match: (<<<)\s*(DIFF)\s*$\n?
      scope: punctuation.section.embedded.begin.php punctuation.definition.string.php
      captures:
        1: keyword.operator.heredoc.php
      embed: heredoc-diff
      embed_scope: meta.embedded.diff source.diff
      escape: (?=^\s*DIFF\b)
    - match: (<<<)\s*('DIFF')\s*$\n?
      scope: meta.embedded.diff punctuation.section.embedded.begin.php punctuation.definition.string.php
      captures:
        1: keyword.operator.nowdoc.php
      embed: scope:source.diff
      embed_scope: meta.embedded.diff source.diff
      escape: (?=^\s*DIFF\b)
  heredoc-php:
    - meta_include_prototype: false
    - match: ''
      push: scope:embedding.php
      with_prototype:
        - include: interpolation
  heredoc-diff:
    - meta_include_prototype: false
    - match: ''
      push: scope:source.diff
      with_prototype:
        - include: interpolation
